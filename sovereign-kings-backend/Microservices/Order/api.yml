AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: API Gateway configuration for Order Service

Parameters:
  AppName:
    Type: String
  ServiceName:
    Type: String
  Stage:
    Type: String
  OrderApiGatewayRoleArn:
    Type: String
  OrderCreateFunctionArn:
    Type: String
  # LambdaAuthFunctionArn:
  #   Type: String

Resources:
  OrderApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      TracingEnabled: true
      EndpointConfiguration: REGIONAL
      DisableExecuteApiEndpoint: false
      DefinitionBody:
        openapi: 3.0.3
        info:
          version: 1.0.0
          title: !Sub "${AppName}-${Stage}-${ServiceName}-api"
          description: API for managing orders

        # components:
        #   securitySchemes:
        #     Authorizer:
        #       type: apiKey
        #       name: Authorization
        #       in: header
        #       x-amazon-apigateway-authtype: custom
        #       x-amazon-apigateway-authorizer:
        #         authorizerResultTtlInSeconds: 300
        #         type: token
        #         identitySource: method.request.header.Authorization
        #         authorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthFunctionArn}/invocations
        #         authorizerCredentials: !Ref OrderApiGatewayRoleArn

        paths:
          /order/create:
            post:
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: "${OrderApiGatewayRoleArn}"
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrderCreateFunctionArn}/invocations"
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "{}"

  OrderCreatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OrderCreateFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${OrderApiGateway}/${Stage}/POST/order/create"